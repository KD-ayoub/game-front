// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id						String      @id @default(uuid())
	full_name				String
	intra_42_id				Int @unique
	nickName				String @unique


	fac_auth				Boolean @default(false)
	last_activity			DateTime

	first_time				Boolean @default(true)

	is_active				String	@default("offline")
	
	games					Int			@default(0)
	win						Int			@default(0)
	lose					Int			@default(0)
	
	// relationship with frienship
	user					Friendship[] @relation("user")
	friends					Friendship[] @relation("friends")
	// relationship with profile
	profile					Profile?
	achievement		achievement?

	// relationship with game_history
	player_history			games_history[] @relation("player")
	opponent_history		games_history[] @relation("opponent")

	// relationship with message
	messages				message[]
}

model Friendship {
	id						Int      @id @default(autoincrement())
	createdAt				DateTime @default(now())

	userId				String
	user				User @relation("user", fields: [userId], references: [id])

	friendId			String
	friend				User @relation("friends", fields: [friendId], references: [id])
}


model Profile {
	userID					String @unique
	User					User @relation(fields: [userID],references: [id])

	photo_path				String @default("defautl_img")
	//here id of the image it self
	photoID						String	@default("default_img")


	friend_number			Int @default(0)
	level					Float @default(0)
	TwoFac_pass				String?
}


model games_history{
	id						String	@id @default(uuid())

	player_id				String
	Player					User @relation("player",fields: [player_id],references: [id])

	opponent_id				String
	opponent				User @relation("opponent",fields: [opponent_id],references: [id])


	xp_level	Int
	date					DateTime @default(now())
	result					Boolean
}

model achievement {
	id	String @id @default(uuid())
	user_id		String @unique
	user			User @relation(fields:[user_id],references:[id])

	kickstart		Boolean
	social		Boolean
	first_game		Boolean
	level_1		Boolean
	level_5		Boolean
}

model message {
	id					String	@id @default(uuid())
	SenderID			String
	User				User	@relation(fields: [SenderID],references: [id])

	message_content		String
	timeStamp			DateTime
	convo_id			String
	convo				conversation @relation(fields: [convo_id],references: [convo_id])
}


model conversation {
	convo_id			String	@id @default(uuid())
	convo_type			Boolean
	convo_name			String
	created_at			DateTime @default(now())

	// relationship with message
	messages				message[]
	// relationship with participants
	participants			participants[]
}

model participants {
	participant_id			String	@id @default(uuid())
	convo_id				String
	convo					conversation	@relation(fields: [convo_id],references: [convo_id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}
